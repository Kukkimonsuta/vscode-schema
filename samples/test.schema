package improbable.example;
package improbable.example_with_underscores;

import "/absolute/path.schema";
import "./relative/path.schema";
import "implicit/path.schema";
import "with_underscores/path.schema";
import "with-dash/path.schema";
import "no-extension";

// line comment
/* block comment */
/*
  multiline block
  comment
*/
import "improbable.stuff"; // rest of line comment

enum Colour_ {
  RED_ = 0;
  GR_EEN = 1;
  _BLUE = 2;
}

type Movement_ {
  type Nested_ {
    int32 nested_int = 1;
  }

  // line comment
  /*
    block comment
  */

  Cook_ies test = 2;
  b.cookies test333 = 3;
  Coordinates target_position = 4;
  Vector3d target_direction = 5;
  map<int32, a.Cookies> test = 6;
  option<Cookies> test3 = 7;
}

type SomeData {
  int32 value = 1;
}

component Switch {
  id = 1234;
  bool is_enabled = 1;
  
  event SwitchToggled toggled_stuff;
  event option<int32> toggled_bar;

  command AddResource add_resource returns improbable.core.Nothing;
  command option<int32> add_resource returns improbable.core.Nothing;
  command map<foo, bar.stuff> add_resource returns map<foo, bar.stuff>;

  command AddResource add_resource(improbable.core.Nothing);
  command option<int32> add_resource(improbable.core.Nothing);
  command map<foo, bar.stuff> add_resource(map<foo, bar.stuff>);
}

	
component PlayerState {
  id = 1234;
  transient list<Move> moves_to_process = 1;
  transient map<AbilityName, Ability> active_abilities = 2;
  Score score = 3;
}
 
type Score {
  transient option<int32> deployment_score = 1;
  int32 alltime_score = 2;
}

component AnotherComponent {
  id = 1235;
  data SomeData;
}

// Note: You can use either SomeAnnotation or SomeAnnotation() for an empty schema type.
[SomeAnnotation]  // Annotating the enum definition 'Color'.
enum Color {
  [SomeAnnotation()]  // Annotating the enum value definition 'RED'.
  RED = 0;
}
 
[SomeAnnotation]  // Annotating the schema type 'SomeDataType'.
type SomeDataType {
  // Note: You can use a type for annotation regardless of where the type is declared.
  [Nested(1)]  // Annotating the schema type 'Nested' with itself.
  type Nested {int32 a = 1;}
 
  [SomeAnnotation]  // Annotating the field 'some_field'.
  option<int32> some_field = 1;
}
	
// Note: Type names are interpreted according to the current scope,
//       though you can also use fully-qualified names.
[ComplexType(true, 32, 5.0, "foo", "bar", 5, ComplexType.Nested(50), SomeEnum.FOO)]
type AnnotatedType1 {}
 
// Note: '_' is used for an empty option.
[Collections(option_value = _, list_value = [], map_value = {})]
type AnnotatedType2 {}
 
[Collections(option_value = 1, list_value = [1, 2], map_value = {"foo":1, "bar":2})]
type AnnotatedType3 {}