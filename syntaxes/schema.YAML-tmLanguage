fileTypes:
    - schema
name: 'SpatialOS Schema'
scopeName: source.schema
uuid: 8751c4b8-ddba-49e9-bc2b-692b27305ffc
patterns:
    -
        include: '#package'
    -
        include: '#import'
    -
        include: '#comment'
    -
        name: meta.type.type
        comment: 'type definition'
        begin: '(type)\s+(\w+)\s*\{'
        beginCaptures:
            '1':
                name: storage.type
            '2':
                name: entity.name
        end: '\}'
        patterns:
            -
                include: '#field'
            -
                include: '#comment'
            -
                include: '$self'
    -
        name: meta.type.component
        comment: 'component definition'
        begin: '(component)\s+(\w+)\s*\{'
        beginCaptures:
            '1':
                name: storage.type
            '2':
                name: entity.name
        end: '\}'
        patterns:
            -
                include: '#storage'
            -
                include: '#id'
            -
                include: '#command'
            -
                include: '#comment'
            -
                include: '#event'
            -
                include: '#field'
    -
        name: meta.type.enum
        comment: 'enum definition'
        begin: '(enum)\s+(\w+)\s*\{'
        beginCaptures:
            '1':
                name: storage.type
            '2':
                name: entity.name
        end: '\}'
        patterns:
            -
                include: '#enumField'
            -
                include: '#comment'
repository:
    command:
        captures:
            '1':
                name: keyword.keyword
            '2':
                name: storage.type.data
            '4':
                name: keyword.keyword
            '5':
                name: storage.type.data
        comment: 'command declaration'
        match: '(command)\s+([\w\.]+)\s+([\w_]+)\s+(returns)\s+([\w\.]+)\s*\;'
        name: meta.component.body
    comment:
        begin: '//'
        comment: 'a schema comment'
        end: '$\n?'
        name: comment.line.double-slash
    event:
        captures:
            '1':
                name: keyword.other
            '2':
                name: storage.type.data
        comment: 'event declaration'
        match: '(event)\s+([\w\.]+)\s+([\w_]+)\s*\;'
        name: meta.component.body
    enumField:
        name: meta.type.enumField
        patterns:
            -
                captures:
                    '1': {name: keyword.operator}
                    '2': {name: constant.numeric}
                match: '[\w_]+\s*(\=)\s*(\d+)\s*\;'
                name: meta.type.enumField        
    field:
        comment: 'field definition'
        patterns:
            -
                captures:
                    '1': {name: storage.type}
                    '3': {name: keyword.operator}
                    '4': {name: constant.numeric}
                match: '([\w\.]+)\s+([\w_]+)\s*(\=)\s*(\d+)\s*\;'
                name: meta.type.field
            -
                captures:
                    '1': {name: storage.type}
                    '2': {name: storage.type}
                    '3': {name: punctuation.separator}
                    '4': {name: storage.type}
                    '6': {name: keyword.operator}
                    '7': {name: constant.numeric}
                match: '(map)\<([\w\.]+)(\,)\s*([\w\.]+)\>\s+([\w_]+)\s*(\=)\s*(\d+)\s*\;'
                name: meta.type.field
            -
                captures:
                    '1': {name: storage.type}
                    '2': {name: storage.type}
                    '4': {name: keyword.operator}
                    '5': {name: constant.numeric}
                match: '(list)\<([\w\.]+)\>\s+([\w_]+)\s*(\=)\s*(\d+)\s*\;'
                name: meta.type.field
            -
                captures:
                    '1': {name: storage.type}
                    '2': {name: storage.type}
                    '4': {name: keyword.operator}
                    '5': {name: constant.numeric}
                match: '(option)\<([\w\.]+)\>\s+([\w_]+)\s*(\=)\s*(\d+)\s*\;'
                name: meta.type.field
            -
                captures:
                    '1': {name: keyword.other}
                    '4': {name: keyword.operator}
                    '5': {name: constant.boolean}
                match: '(option)\s+([\w_]+)\s*(\=)\s*(true|false)\s*\;'
                name: meta.type.field
            -
                include: '#primitive'
    id:
        captures:
            '2':
                name: keyword.operator
            '3':
                name: constant.numeric
        comment: 'id declaration'
        match: '(id)\s*(\=)\s*(\d+)\s*\;'
        name: meta.component.body
    import:
        captures:
            '1':
                name: keyword.other.import
            '2':
                name: support.class.import
        comment: 'import company.package;'
        match: '(import)\s+("[\w\/]+[a-zA-Z0-9_]+\.schema")\s*\;'
        name: meta.import
    package:
        captures:
            '1':
                name: keyword.other.package
            '2':
                name: support.other.package
        comment: 'package company.package;'
        match: '(package)\s+([\w\.]+)\s*\;'
        name: meta.package
    primitive:
        captures:
            '1':
                name: storage.type.primitive
        comment: 'built in data type'
        match: '\b(bool|uint32|uint64|int32|int64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|float|double|string|bytes|Coordinates|Vector3d|Vector3f|EntityId|EntityPosition|option|map)\b'
        name: meta.declaration.body
    constant:
        name: constant.boolean
        match: '(true|false)'
    storage:
        captures:
            '1':
                name: keyword.other.data
            '2':
                name: storage.type.data
        comment: 'data declaration'
        match: '(data)\s+([\w\.]+)\s*\;'
        name: meta.component.body
